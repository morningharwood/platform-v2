/**
 *   body {
 *     @include background-image('pattern');
 *   }
 */

$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';

@mixin background-image($name, $size:false) {
  background-image: url(#{$image-path}/#{$name}.svg);

  @if ($size) {
    background-size: $size;
  }

  .no-svg & {
    background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

    @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
      background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
    }
  }
}

@mixin bp($type) {
  @if $type == 1 {
    @media #{"(min-width: 576px)"} {
      @content;
    }
  } @else if $type == 2 {
    @media #{"(min-width: 768px)"} {
      @content;
    }
  } @else if $type == 3 {
    @media #{"(min-width: 992px)"} {
      @content;
    }
  } @else if $type == 4 {
    @media #{"(min-width: 1200px)"} {
      @content;
    }
  } @else if $type == 5 {
    @media #{"(min-width: 1599px)"} {
      @content;
    }
  }

}

@mixin accessible-hide() {
  position: absolute !important;
  top: -9999px !important;
  left: -9999px !important;
}

@mixin hide() {
  display: none;
  visibility: hidden;
}

@mixin show($display) {
  display: $display;
  visibility: visible;
}

@mixin center-flex() {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin color-filter-base($color) {
  $local-bg: $white-off;
  $local-copy: $black-mh;
  $local-link: $blue-link;

  &.#{$color}-filter {
    @if $color == 'sepia' {
      $local-bg: $sepia-bg;
      $local-copy: $sepia-copy;
      $local-link: $sepia-link;
    } @else if $color == 'dark' {
      $local-bg: $dark-bg;
      $local-copy: $dark-copy;
      $local-link: $dark-link;
    } @else {
      $local-bg: $light-bg;
      $local-copy: $light-copy;
      $local-link: $light-link;
    }

    background-color: $local-bg;
    color: $local-copy;

    a {
      color: $local-link
    }
  }
}

/// Shorthand mixin for offset positioning
/// @param {String} $position - Either `relative`, `absolute` or `fixed`
/// @param {Length} $top [null] - Top offset
/// @param {Length} $right [null] - Right offset
/// @param {Length} $bottom [null] - Bottom offset
/// @param {Length} $left [null] - Left offset
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  bottom: $bottom;
  left: $left;
  position: $position;
  right: $right;
  top: $top;
}

@mixin size($width, $height: $width) {
  height: $height;
  width: $width;
}
